name: Secret Message API CI/CD

on:
  push:
    branches:
      - main 
    paths:
      - 'api/**' 
      - 'ux/**' 
      - '.github/workflows/main.yml' 
  pull_request:
    branches:
      - main
    paths:
      - 'api/**'
      - 'ux/**'
      - '.github/workflows/main.yml'
  workflow_dispatch: 

permissions:
  contents: read 
  packages: write 

jobs:
  flake8-lint:
    name: Lint Code (Flake8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: /home/runner/work/technical-test-devops/technical-test-devops/api/requirements_dev.txt 
      - name: Install flake8
        run: pip install flake8
      - name: Run Flake8
        run: flake8  --max-line-length 120
        working-directory: api

  bandit-scan:
    name: Security Scan (Bandit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: /home/runner/work/technical-test-devops/technical-test-devops/api/requirements_dev.txt 
      - name: Install bandit
        run: pip install bandit
      - name: Run Bandit
        run: bandit -r ./main.py
        working-directory: api

  pytest-tests:
    name: Run Tests (Pytest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: /home/runner/work/technical-test-devops/technical-test-devops/api/requirements_dev.txt 
      - name: Install test dependencies
        run: pip install -r /home/runner/work/technical-test-devops/technical-test-devops/api/requirements_dev.txt 
      - name: Run pytest
        run: pytest
        working-directory: api

  pip-audit-scan:
    name: Dependency Scan (pip-audit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: /home/runner/work/technical-test-devops/technical-test-devops/api/requirements.txt 
      - name: Install pip-audit
        run: pip install pip-audit
      - name: Run pip-audit
        run: pip-audit -r requirements.txt
        working-directory: api

  build-and-push-images:
    name: Build API Docker Image
    runs-on: ubuntu-latest
    needs:
      - flake8-lint
      - pytest-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: /home/runner/work/technical-test-devops/technical-test-devops/api/requirements.txt 
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Your GitHub username
          password: ${{ secrets.GITHUB_TOKEN }} # Special GitHub token for Actions

      - name: Define image tag
        id: vars
        run: echo "TAG=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT # Use short SHA as tag

      - name: Build Docker Image (API)
        # Utilisez 'ghcr.io/${{ github.repository }}/api' comme nom d'image pour GHCR
        # et ajoutez le tag qui inclut le SHA du commit pour une traçabilité unique
        run: | 
          docker build -t ghcr.io/${{ github.repository }}/secret-message-api:latest -t ghcr.io/${{ github.repository }}/secret-message-api:${{ steps.vars.outputs.TAG }} /home/runner/work/technical-test-devops/technical-test-devops/api/
          docker build -t ghcr.io/${{ github.repository }}/secret-message-ux:latest -t ghcr.io/${{ github.repository }}/secret-message-ux:${{ steps.vars.outputs.TAG }} /home/runner/work/technical-test-devops/technical-test-devops/ux/
        working-directory: api

      - name: Push Docker Images to GHCR
        run: |
          docker push ghcr.io/${{ github.repository }}/secret-message-api:latest
          docker push ghcr.io/${{ github.repository }}/secret-message-api:${{ steps.vars.outputs.TAG }}
          docker push ghcr.io/${{ github.repository }}/secret-message-ux:latest
          docker push ghcr.io/${{ github.repository }}/secret-message-ux:${{ steps.vars.outputs.TAG }}


  security-scan-docker-image:
    name: Scan Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push-images # Dépend maintenant du job de build ET push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry (for pulling image)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Define image tag for pulling
        id: vars_pull
        run: echo "TAG=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Pull Docker Image from GHCR
        run: docker pull ghcr.io/${{ github.repository }}/secret-message-api:${{ steps.vars_pull.outputs.TAG }}

      - name: Run Trivy Scan on Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          # Scanne l'image qui vient d'être tirée du registre
          image-ref: 'ghcr.io/${{ github.repository }}/secret-message-api:${{ steps.vars_pull.outputs.TAG }}'
          format: 'table' # Format de sortie modifié en 'table'
          output: 'trivy-api-results.txt' # Nom du fichier modifié en '.txt'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
        continue-on-error: true
        env:
          TRIVY_ACTION_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Trivy API Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-api-scan-results
          path: trivy-api-results.txt